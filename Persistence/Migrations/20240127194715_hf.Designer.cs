// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(SMSAppContext))]
    [Migration("20240127194715_hf")]
    partial class hf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Science",
                            Name = "Science"
                        },
                        new
                        {
                            Id = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "Att",
                            Name = "Art"
                        },
                        new
                        {
                            Id = new Guid("86783c47-d156-461f-aa04-81c189be7096"),
                            Description = "Commercial",
                            Name = "Commercial"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectExams");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7108f330-b5d0-4f21-8e2b-1732a5d01e73"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6418),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6419),
                            Description = "Oga pata pata",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6419),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("fe2632e5-30ba-41a5-adbc-615e7e0675c4"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7343),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7345),
                            Description = "Omo ishe",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7345),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("a1e8ef0f-0970-400c-be43-46ea5e596843"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7351),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7352),
                            Description = "Student",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7352),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileComplete")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4858e1f-3a78-4dfb-b640-20efb387c6c9"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6368),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6381),
                            Email = "Oga@Admin",
                            FullName = "Oga@Admin",
                            IsDeleted = false,
                            IsProfileComplete = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(6381),
                            Password = "password",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("790ef3e8-7b90-427e-abaf-65c42256bbc9"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7460),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7461),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7460),
                            RoleId = new Guid("7108f330-b5d0-4f21-8e2b-1732a5d01e73"),
                            UserId = new Guid("c4858e1f-3a78-4dfb-b640-20efb387c6c9")
                        });
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c88741ec-06cb-4d0b-9d64-633fc6dcda29"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7480),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7481),
                            Description = "SSS1",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7481),
                            Name = "SSS1"
                        },
                        new
                        {
                            Id = new Guid("6c248d93-b38d-4ef8-8eef-8e942113d756"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7484),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7484),
                            Description = "SSS2",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7484),
                            Name = "SSS2"
                        },
                        new
                        {
                            Id = new Guid("7b0baf0f-7a84-4852-8c7a-5e1123e5c8e1"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7487),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7488),
                            Description = "SSS3",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7487),
                            Name = "SSS3"
                        });
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("LevelTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaperStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Domain.Entity.PaymentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IMageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Marks")
                        .HasColumnType("float");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entity.SchoolProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SchoolFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SchoolProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7906a0a5-4d5b-48c3-8ca8-8e47f8a4f40e"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7613),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7614),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7614),
                            SchoolFee = 200000.00m,
                            Session = "2022/2023",
                            Term = 1
                        });
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fcaa264-5a56-48c9-87b8-20959f682679"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7436),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7437),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7437),
                            UserId = new Guid("c4858e1f-3a78-4dfb-b640-20efb387c6c9")
                        });
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffsLevels");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeachersComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b73156d5-fb45-4382-9a3b-fc0188088671"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7512),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7513),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7512),
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("4b195694-e28a-4e75-8431-46e8b1f026a5"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7517),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7517),
                            Description = "English vocabulary",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7517),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("acdbc132-8f3c-4502-8f92-8f9887e614e1"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7520),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7520),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Physics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7520),
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("3b9af27e-9884-46af-a07b-a9fbac172576"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7523),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7523),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Chemistry",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7523),
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("ebb5b755-4b5b-4bc6-bc8c-40abb4df8ecb"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7528),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7529),
                            Description = "Biology",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7528),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("d00b4aa5-6aec-4484-81a7-2b124f6c9046"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7531),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7532),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "ICT",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7531),
                            Name = "ICT"
                        },
                        new
                        {
                            Id = new Guid("438bbde6-d449-4962-a385-4adf4e1efc78"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7534),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7535),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Further Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7534),
                            Name = "Further Mathematics"
                        },
                        new
                        {
                            Id = new Guid("65e50ba5-2d6e-4ce7-be05-8f131e92f056"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7537),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7538),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Geography",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7537),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = new Guid("a45c8a3b-3a58-411c-bcc7-0301a1c71dd2"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7540),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7541),
                            DepartmentId = new Guid("7c4ae141-6dcd-457a-959c-08147a016d32"),
                            Description = "Agric Science",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7540),
                            Name = "Agric Science"
                        },
                        new
                        {
                            Id = new Guid("5472c5e1-67a8-4019-a629-d6aad6616cac"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7543),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7543),
                            DepartmentId = new Guid("86783c47-d156-461f-aa04-81c189be7096"),
                            Description = "Commerce",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7543),
                            Name = "Commerce"
                        },
                        new
                        {
                            Id = new Guid("ad95ee73-cdc0-4a00-9bff-d982816d7943"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7546),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7546),
                            DepartmentId = new Guid("86783c47-d156-461f-aa04-81c189be7096"),
                            Description = "Account",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7546),
                            Name = "Account"
                        },
                        new
                        {
                            Id = new Guid("b9aafd8b-aa0b-435b-bc69-caa219941c68"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7582),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7583),
                            DepartmentId = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "Government",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7582),
                            Name = "Government"
                        },
                        new
                        {
                            Id = new Guid("7cd96059-0cd2-430a-aec4-21c5470e77cb"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7587),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7588),
                            DepartmentId = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "History",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7588),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("8c7aaad8-bc26-408c-a5ed-37675b7d5c00"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7590),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7591),
                            DepartmentId = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "CRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7591),
                            Name = "CRS"
                        },
                        new
                        {
                            Id = new Guid("18e9e88b-93c5-4431-8550-e83cc029c5f5"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7593),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7594),
                            DepartmentId = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "IRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7594),
                            Name = "IRS"
                        },
                        new
                        {
                            Id = new Guid("d8b62a2a-25fb-43f1-ba24-a7e29ff10d34"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7596),
                            DeletedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7597),
                            DepartmentId = new Guid("ff6c32e0-bcaf-4fbe-affd-9456c2ecdc78"),
                            Description = "Literature-in-English",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2024, 1, 27, 20, 47, 15, 27, DateTimeKind.Local).AddTicks(7597),
                            Name = "Literature-in-English"
                        });
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.HasOne("Domain.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("Domain.Entity.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Papers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("Papers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Level");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.PaymentRequest", b =>
                {
                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("Questions")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entity.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Students")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entity.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("StudentPaper")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("StudentPaper")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("Papers");

                    b.Navigation("StaffsLevels");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Navigation("StaffsLevels");

                    b.Navigation("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Navigation("ExamSubjects");

                    b.Navigation("Papers");

                    b.Navigation("StaffsSubjects");

                    b.Navigation("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("SubjectTimeTables");
                });
#pragma warning restore 612, 618
        }
    }
}
