// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(SMSAppContext))]
    [Migration("20231105142054_IsprofileComplete")]
    partial class IsprofileComplete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Science",
                            Name = "Science"
                        },
                        new
                        {
                            Id = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "Att",
                            Name = "Art"
                        },
                        new
                        {
                            Id = new Guid("da21c254-486f-4976-aad5-5d51fd22898f"),
                            Description = "Commercial",
                            Name = "Commercial"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectExams");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb5e0e33-a105-400d-99fe-b6e5f3888982"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6084),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6085),
                            Description = "Oga pata pata",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6085),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("6c3e84ab-ec64-4e3a-ba37-3e6be992b996"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7416),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7418),
                            Description = "Omo ishe",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7418),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("c6858114-70ab-4479-b901-3addb6bf1484"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7439),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7440),
                            Description = "Student",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7439),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileComplete")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26746986-5393-47d6-9667-78c68362158a"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6027),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6040),
                            Email = "Oga@Admin",
                            FullName = "Oga@Admin",
                            IsDeleted = false,
                            IsProfileComplete = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(6040),
                            Password = "password",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a945f64-8554-40eb-8523-edb5bd55325d"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7555),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7556),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7556),
                            RoleId = new Guid("bb5e0e33-a105-400d-99fe-b6e5f3888982"),
                            UserId = new Guid("26746986-5393-47d6-9667-78c68362158a")
                        });
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c821195-f977-40a0-ae38-d5618dbfcae8"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7580),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7582),
                            Description = "SSS1",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7581),
                            Name = "SSS1"
                        },
                        new
                        {
                            Id = new Guid("05f181b0-0c2d-4133-bc58-8a528e3dea4f"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7586),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7587),
                            Description = "SSS2",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7586),
                            Name = "SSS2"
                        },
                        new
                        {
                            Id = new Guid("8de61166-a421-4ff3-856e-e30d55282d91"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7590),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7591),
                            Description = "SSS3",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7591),
                            Name = "SSS3"
                        });
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("LevelTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaperStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Domain.Entity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IMageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Marks")
                        .HasColumnType("float");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acee4ef7-9942-4fb6-9e12-2e9d6143222e"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7537),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7538),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7538),
                            UserId = new Guid("26746986-5393-47d6-9667-78c68362158a")
                        });
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffsLevels");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeachersComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35ec362f-8ac7-4fa3-91e9-32810779f792"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7627),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7628),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7627),
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("52cec3a6-7f6f-49b2-aeb6-bf0dfe494679"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7637),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7638),
                            Description = "English vocabulary",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7638),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("901916cf-0703-48a5-9f5c-21d105f694bd"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7645),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7646),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Physics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7645),
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("f498a5a1-3b06-4ced-aaac-030d33d6399c"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7649),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7650),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Chemistry",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7650),
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("36b9736f-3ece-4baa-bd55-6fbcd277ab42"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7654),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7655),
                            Description = "Biology",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7654),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("ce39a632-a1e9-4011-a55b-b268729ffc1c"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7658),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7659),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "ICT",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7658),
                            Name = "ICT"
                        },
                        new
                        {
                            Id = new Guid("40b15367-e456-471b-8d1a-3091d5fad9fe"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7662),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7663),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Further Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7663),
                            Name = "Further Mathematics"
                        },
                        new
                        {
                            Id = new Guid("b9f33710-697b-4e90-a32c-45fa7f503846"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7666),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7667),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Geography",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7667),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = new Guid("d375d3ac-7dec-4cb0-b46c-4d03b844978d"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7672),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7673),
                            DepartmentId = new Guid("95a20fe8-f023-404b-ab5c-95acfcce298f"),
                            Description = "Agric Science",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7673),
                            Name = "Agric Science"
                        },
                        new
                        {
                            Id = new Guid("7e4d0e6f-232b-46c1-b79b-d3b9fec00117"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7730),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7731),
                            DepartmentId = new Guid("da21c254-486f-4976-aad5-5d51fd22898f"),
                            Description = "Commerce",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7731),
                            Name = "Commerce"
                        },
                        new
                        {
                            Id = new Guid("2e3b756f-2aeb-4238-b8a1-f9f7aeaf09dd"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7739),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7740),
                            DepartmentId = new Guid("da21c254-486f-4976-aad5-5d51fd22898f"),
                            Description = "Account",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7739),
                            Name = "Account"
                        },
                        new
                        {
                            Id = new Guid("ed11911c-880d-4543-bd98-eee7c4f18ed8"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7743),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7744),
                            DepartmentId = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "Government",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7744),
                            Name = "Government"
                        },
                        new
                        {
                            Id = new Guid("2940bd03-b2cf-497c-b815-3c0b520cab84"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7748),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7749),
                            DepartmentId = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "History",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7748),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("21a3edc5-ba01-4ddc-a24c-66f4a34788f4"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7752),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7753),
                            DepartmentId = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "CRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7753),
                            Name = "CRS"
                        },
                        new
                        {
                            Id = new Guid("90266ade-6e8c-41c9-9e45-a5fa234c17a7"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7757),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7758),
                            DepartmentId = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "IRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7758),
                            Name = "IRS"
                        },
                        new
                        {
                            Id = new Guid("aec3de86-6db1-4308-8da2-a4267228df03"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7762),
                            DeletedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7763),
                            DepartmentId = new Guid("69d0fb70-9302-4a1c-858f-b39bb1213e99"),
                            Description = "Literature-in-English",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 11, 5, 15, 20, 53, 450, DateTimeKind.Local).AddTicks(7762),
                            Name = "Literature-in-English"
                        });
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.HasOne("Domain.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("Domain.Entity.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Papers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("Papers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Level");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Payment", b =>
                {
                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("Questions")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entity.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Students")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entity.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("StudentPaper")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("StudentPaper")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("Papers");

                    b.Navigation("StaffsLevels");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Navigation("StaffsLevels");

                    b.Navigation("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Navigation("ExamSubjects");

                    b.Navigation("Papers");

                    b.Navigation("StaffsSubjects");

                    b.Navigation("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("SubjectTimeTables");
                });
#pragma warning restore 612, 618
        }
    }
}
