// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(SMSAppContext))]
    [Migration("20231021121501_newmi")]
    partial class newmi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Science",
                            Name = "Science"
                        },
                        new
                        {
                            Id = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "Att",
                            Name = "Art"
                        },
                        new
                        {
                            Id = new Guid("8b760327-d4d4-474c-a2a7-028d8e7b2502"),
                            Description = "Commercial",
                            Name = "Commercial"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectExams");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("257a82c2-b0d5-467b-b93b-334ad386be2c"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2454),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2454),
                            Description = "Oga pata pata",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2454),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("df117905-48c9-42d3-9c9f-e281d16356fe"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3696),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3698),
                            Description = "Omo ishe",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3697),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("8f765493-93dd-4293-b607-dac9aead7512"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3704),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3705),
                            Description = "Student",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3704),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2012a23d-d828-43c2-a92f-296ebfa6afe6"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2393),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2406),
                            Email = "Oga@Admin",
                            FullName = "Oga@Admin",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(2406),
                            Password = "password",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ad22dac-6c70-47d8-9035-03ee4f57e93d"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3848),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3849),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3848),
                            RoleId = new Guid("257a82c2-b0d5-467b-b93b-334ad386be2c"),
                            UserId = new Guid("2012a23d-d828-43c2-a92f-296ebfa6afe6")
                        });
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89cd6c56-feef-43e5-8d8f-d408c8837e55"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3873),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3874),
                            Description = "SSS1",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3873),
                            Name = "SSS1"
                        },
                        new
                        {
                            Id = new Guid("80c827ca-e200-4f5e-b33c-1dffcd058481"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3878),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3879),
                            Description = "SSS2",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3878),
                            Name = "SSS2"
                        },
                        new
                        {
                            Id = new Guid("64a92191-a4f5-4708-8e34-ce669f3e2f68"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3882),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3883),
                            Description = "SSS3",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3882),
                            Name = "SSS3"
                        });
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("LevelTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaperStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Domain.Entity.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IMageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Marks")
                        .HasColumnType("float");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81ee5f30-19cd-4658-bc85-66df402dde15"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3806),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3807),
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3806),
                            UserId = new Guid("2012a23d-d828-43c2-a92f-296ebfa6afe6")
                        });
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffsLevels");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeachersComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1efb8597-4335-49ae-a2e7-7f5320b18ec3"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3925),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3926),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3926),
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("3be8be78-2033-411e-8caa-efb1cc56fbc8"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3931),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3932),
                            Description = "English vocabulary",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3932),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("9a20fe82-fa3f-4f62-829c-428d4a11719f"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3935),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3936),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Physics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3936),
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("47000ab0-4246-48ba-b5f8-34743e2a1993"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3939),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3940),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Chemistry",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3940),
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("bae98e25-49ec-4957-920c-0b6152fa48b4"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3947),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3948),
                            Description = "Biology",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3947),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("70380e96-a09c-429a-85a9-9571db64e6a7"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3951),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3952),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "ICT",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3951),
                            Name = "ICT"
                        },
                        new
                        {
                            Id = new Guid("e09637a2-c434-4a29-a554-7c3fa6886b0f"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3955),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3956),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Further Mathematics",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(3955),
                            Name = "Further Mathematics"
                        },
                        new
                        {
                            Id = new Guid("9664541f-5df6-4286-ae23-e94dc656c592"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4013),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4014),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Geography",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4013),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = new Guid("8ecee9e2-470e-4d35-8544-506e946ed473"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4018),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4019),
                            DepartmentId = new Guid("bb09afb3-8e27-4cae-bd5c-930969c4cc03"),
                            Description = "Agric Science",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4019),
                            Name = "Agric Science"
                        },
                        new
                        {
                            Id = new Guid("3468ee3f-9226-4714-ac4b-87344b59eaf1"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4023),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4024),
                            DepartmentId = new Guid("8b760327-d4d4-474c-a2a7-028d8e7b2502"),
                            Description = "Commerce",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4023),
                            Name = "Commerce"
                        },
                        new
                        {
                            Id = new Guid("70ee6712-201f-4802-b66f-13a4c2dc75f4"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4027),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4028),
                            DepartmentId = new Guid("8b760327-d4d4-474c-a2a7-028d8e7b2502"),
                            Description = "Account",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4027),
                            Name = "Account"
                        },
                        new
                        {
                            Id = new Guid("79762c62-34e6-4844-b591-bc7316725c90"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4031),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4032),
                            DepartmentId = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "Government",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4032),
                            Name = "Government"
                        },
                        new
                        {
                            Id = new Guid("eb48627f-7252-437a-a04b-ca493c50b24d"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4038),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4039),
                            DepartmentId = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "History",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4038),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("59a293c4-d4f3-429b-bf51-26e2477bc98e"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4042),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4043),
                            DepartmentId = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "CRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4042),
                            Name = "CRS"
                        },
                        new
                        {
                            Id = new Guid("b9f1161c-78ca-4716-8cf6-6b331ad8dd4f"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4046),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4047),
                            DepartmentId = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "IRS",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4046),
                            Name = "IRS"
                        },
                        new
                        {
                            Id = new Guid("d299438c-23c0-4adb-b434-02d1ecd56cda"),
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4050),
                            DeletedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4051),
                            DepartmentId = new Guid("2f76ca48-8044-444b-a965-cd0b5382c911"),
                            Description = "Literature-in-English",
                            IsDeleted = false,
                            LastModifiedBy = 0,
                            LastModifiedOn = new DateTime(2023, 10, 21, 13, 15, 0, 527, DateTimeKind.Local).AddTicks(4050),
                            Name = "Literature-in-English"
                        });
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("Domain.Entity.Choice", b =>
                {
                    b.HasOne("Domain.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entity.ExamSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany("Subjects")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("Domain.Entity.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.LevelTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("LevelTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.HasOne("Domain.Entity.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Papers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("Papers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Level");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Payment", b =>
                {
                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("Questions")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entity.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StaffsLevels", b =>
                {
                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsLevels")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.StaffsSubjects", b =>
                {
                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("StaffsSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Level", "Level")
                        .WithMany("Students")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entity.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.StudentPaper", b =>
                {
                    b.HasOne("Domain.Entity.Paper", "Paper")
                        .WithMany("StudentPaper")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("StudentPaper")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.HasOne("Domain.Entity.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entity.SubjectTimeTable", b =>
                {
                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TimeTable", "TimeTable")
                        .WithMany("SubjectTimeTables")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("Domain.Entity.Department", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Domain.Entity.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Identity.User", b =>
                {
                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entity.Level", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("Papers");

                    b.Navigation("StaffsLevels");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entity.Paper", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Navigation("StaffsLevels");

                    b.Navigation("StaffsSubjects");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("StudentPaper");
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Navigation("ExamSubjects");

                    b.Navigation("Papers");

                    b.Navigation("StaffsSubjects");

                    b.Navigation("SubjectTimeTables");
                });

            modelBuilder.Entity("Domain.Entity.TimeTable", b =>
                {
                    b.Navigation("LevelTimeTables");

                    b.Navigation("SubjectTimeTables");
                });
#pragma warning restore 612, 618
        }
    }
}
